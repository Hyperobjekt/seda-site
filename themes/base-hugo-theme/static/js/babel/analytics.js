"use strict";/**
 * Analytics listeners
 */(function(a){// console.log('Loading Analytics listeners');
var b={};if(b.push=function(a){dataLayer.push(a)},b.navigate=function(a,b){b?window.open(a,"_blank"):window.location.href=a},b.init=function(){a(".gta-event-CTAClick").on("click touchstart",function(c){c.preventDefault();var d=a(c.currentTarget).attr("href"),e="_blank"===a(c.currentTarget).attr("target"),f=a(c.currentTarget).attr("aria-label")?a(c.currentTarget).attr("aria-label"):a(c.currentTarget).find("span").html(),g={event:"CTAClick",CTADestination:encodeURI(d),CTAPrompt:f,eventCallback:function eventCallback(){b.navigate(d,e)}};b.push(g)}),a(".gta-event-DiscoveriesCTAClick").on("click touchstart",function(c){c.preventDefault();var d=a(c.currentTarget).attr("href"),e="_blank"===a(c.currentTarget).attr("target"),f=a(c.currentTarget).attr("aria-label")?a(c.currentTarget).attr("aria-label"):a(c.currentTarget).text(),g={event:"DiscoveriesCTAClick",CTADestination:encodeURI(d),CTAPrompt:f,eventCallback:function eventCallback(){b.navigate(d,e)}};b.push(g)}),a(".gta-event-bioExpanded").on("click touchstart",function(c){// console.log('.gta-event-bioExpanded');
var d=a(c.currentTarget);// console.log($target);
b.push({event:"bioExpanded"})}),a(".gta-event-eMailSignupAttempt").on("click touchstart",function(){// console.log('.gta-event-eMailSignupAttempt');
b.push({event:"eMailSignupAttempt"})}),a(".gta-event-postSelected").on("click touchstart",function(c){c.preventDefault();var d=a(c.currentTarget).attr("href"),e={event:"postSelected",discoverySelection:encodeURI(d),eventCallback:function eventCallback(){window.location.href=d}};b.push(e)}),a(".gta-event-showAbstractandVersion").on("click touchstart",function(c){// console.log('.gta-event-showAbstractandVersion');
var d=a(c.currentTarget),e=null,f=d.closest(".research-paper").hasClass("abstract-visible");if(f){e=a(".row.subnav.small-tab-nav").is(":visible")?a(".row.subnav.small-tab-nav").find("ul.anchor-links li a.active").text():a(".row.subnav.large-tab-nav").find("#researchTabs li a.active").text();// console.log('$paperCategory: ' + $paperCategory);
var g=null;g=a(c.currentTarget).closest(".research-paper").find(".info h5").text();// console.log($paperName);
var h={event:"showAbstractandVersion",paperCategory:e?e:"Unavailable",paperName:g?g:"Unavailable"};b.push(h)}}),a(".gta-event-categorySelected").on("click touchstart",function(c){// console.log('.gta-event-categorySelected');
var d=a(c.currentTarget),e=d.text(),f={event:"categorySelected",paperCategory:e?e:"Unavailable"};b.push(f)}),a(".gta-event-paperDownloadbyVersion").on("click touchstart",function(c){// console.log('.gta-event-paperDownloadbyVersion');
// e.preventDefault();
var d=a(c.currentTarget),e=null;e=a(c.currentTarget).closest(".research-paper").find(".info h5").text();// console.log($paperName);
var f=d.attr("data-date"),g={event:"paperDownloadbyVersion",paperVersion:f,paperName:e};// console.log($paperVersion);
b.push(g)}),a(".gta-event-paperDownloadLatest").on("click touchstart",function(c){// console.log('.gta-event-paperDownloadLatest');
var d=a(c.currentTarget),e=d.closest(".research-paper").find(".info h5").text(),f=d.attr("data-date");b.push({event:"paperDownloadLatest",paperVersion:f,paperName:e})}),a(".gta-event-articleSelected").on("click touchstart",function(c){c.preventDefault();var d=a(c.currentTarget).attr("href"),e=a(c.currentTarget).closest(".row.news-item").find("h4 a"),f=e.text(),g=e.attr("data-outlet"),h="_blank"===a(c.currentTarget).attr("target");b.push({event:"articleSelected",newsArticleName:f,newsArticlePublication:g,eventCallback:function eventCallback(){b.navigate(d,h)}})}),a(".gta-event-faqTopicExpanded").on("click touchstart",function(c){// console.log('.gta-event-faqTopicExpanded');
var d=a(c.currentTarget),e=a(c.currentTarget).find("h5").text();b.push({event:"faqTopicExpanded",faqTopExpansion:e})});/**
     * Manual callback handler, discoveries article scroll depth
     * false == no scroll to track from previous page
     */var c=bamPercentPageViewed.callback();if(!1!==c)// console.group('Callback');
// console.log(callbackData);
// console.groupEnd();
// If the data is from a discoveries page, then send.
if(-1<c.documentLocation.indexOf("discoveries")){console.log("Discoveries page. Pushing to GA.");var d={event:"discoveryScrollDepthSave",discoveryScrollDepth:c.scrollPercent,discoveryScrollDepthLocation:c.documentLocation};b.push(d)}else;/**
    * Init the bamPercentPageViewed plugin
    */(function(){var a=onload,b=function(){bamPercentPageViewed.init({trackDelay:"2000",percentInterval:"10"})};onload="function"==typeof a?function onload(){b(),a()}:b})(window),a(".gta-event-dataDownload a").on("click touchstart",function(c){// console.log('Data download link selected.');
var d=a(c.currentTarget),e=d.attr("href"),f=1===d.closest("table").find("th").length?d.closest("table").find("th").text():"Not available",g=d.closest(".tab-pane.active").attr("id")?(d.closest(".tab-pane.active").attr("id")+"").replace("version","").replace("-","."):"Not available";b.push({event:"dataDownloaded",dataFile:e,dataHeading:f,dataVersion:g})}),a(".gta-event-navClick").on("click touchstart",function(c){c.preventDefault();var d=a(c.currentTarget),e=d.attr("href"),f="_blank"===d.attr("target"),g=null;1<=d.closest("#drawer").length&&(g="main"),1<=d.closest("footer").length&&(g="footer");var h=d.text().trim();0>=h.length&&(h=d.attr("href")),0>=h.length&&(h=d.find("span, h1")[0].text().trim());// console.log($navType);
// console.log($navItem);
var i={event:"navClick",navType:g,navItem:h,eventCallback:function eventCallback(){b.navigate(e,f)}};b.push(i)}),window.addEventListener("error",function(a){// console.log('Error detected in browser window. Sending GA report.');
var c={event:"error",errorMessage:"Error originating from "+a.filename+" at line "+a.lineno+", column "+a.colno+":\n"+a.message};b.push(c)})},!!dataLayer)// console.log('dataLayer found');
var c=1<=a("body.type-discoveries").length?3e3:1600,d=setTimeout(function(){3<=dataLayer.length?b.init():console.log("The GTM dataLayer cannot be found... Skipping analytics listeners.")},c);else console.log("Error! The GTM dataLayer cannot be found... Skipping analytics listeners.")})(jQuery);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,