"use strict";function _typeof(a){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a},_typeof(a)}function _extends(){return _extends=Object.assign||function(a){for(var b,c=1;c<arguments.length;c++)for(var d in b=arguments[c],b)Object.prototype.hasOwnProperty.call(b,d)&&(a[d]=b[d]);return a},_extends.apply(this,arguments)}/**
 * Helper class for easier scatterplot updates
 */function Scatterplot(a,b){var c=this,d=!1,e={},f=["#2ec7c9","#b6a2de","#5ab1ef","#ffb980","#d87a80","#8d98b3","#e5cf0d","#97b552","#95706d","#dc69aa","#07a2a4","#9a7fd1","#588dd5","#f5994e","#c05050","#59678c","#c9ab00","#7eb00a","#6f5553","#c14089"],g="#547892",h={color:f,title:{textStyle:{fontWeight:"normal",color:"#fff",fontFamily:"SharpGrotesk-Medium20",textAlign:"center"},subtextStyle:{fontWeight:"normal",color:"#fff",fontFamily:"MaisonNeue-Medium",textAlign:"center"},textAlign:"center"},visualMap:{itemWidth:15,color:["#5ab1ef","#e0ffff"]},aria:{show:!0,description:"Scatterplot of student test scores"},toolbox:{iconStyle:{normal:{borderColor:f[0]}}},tooltip:{backgroundColor:"#031232",// 'rgba(3, 18, 50, 80%)',
extraCssText:"box-shadow: 0 2px 4px rgba(0, 0, 0, 0.5)",padding:[6,10],textStyle:{color:"#fff",// '#dc69aa',
fontWeight:"500",fontFamily:"SharpGrotesk-Medium20",rich:{span:{fontFamily:"SharpGrotesk-Medium20"},small:{fontFamily:"MaisonNeue-Medium",fontSize:6}}},axisPointer:{type:"line",lineStyle:{color:"#008acd"},crossStyle:{color:"#008acd"},shadowStyle:{color:"rgba(200,200,200,0.2)"}}},grid:{top:10,bottom:32,left:10,right:32,// width: 'auto',
// height: 'auto',
containLabel:!0},valueAxis:{axisLine:{lineStyle:{color:"#fff"// '#008acd'
}},splitArea:{show:!1},splitLine:{show:!1},nameTextStyle:{// Styles for x and y axis labels
color:"#fff",fontSize:12,fontWeight:"normal",fontFamily:"SharpGrotesk-Medium20"// 'MaisonNeue-Medium'
},nameLocation:"middle",nameGap:32,axisLabel:{// Styles for grid numbers
inside:!1,textVerticalAlign:"middle",color:g,// '#fff',
fontFamily:"MaisonNeue-Medium",fontSize:12}},line:{smooth:!0,symbol:"emptyCircle",symbolSize:3},scatter:{symbol:"circle",//color: 'rgba(148, 228, 254, 0.8)',
//color: 'rgba(255, 255, 255, 0.8)',
//color: 'rgba(171, 217, 233, 0.8)',
color:"rgba(202,235,190, 0.77)",itemStyle:{borderWidth:.25,borderColor:"rgba(106, 145, 185, 0.8)",borderType:"solid",opacity:1// borderOpacity: 0,
}},graph:{color:f}};/**
   * Triggers an event with `eventName` and runs all handlers
   */ /**
   * Registers an event handler with the associated eventName
   * If it's a ready handler and everything is ready, run immediately.
   */ /**
   * Set a state generator for the scatterplot
   */ /**
   * Load a state for the scatterplot
   */ /**
   * Get an existing state for the scatterplot
   */ /**
   * Set an object of props for the react component
   */ /**
   * Render the component with props
   */this.states={// default state shared by all scatterplots
// https://ecomfe.github.io/echarts-doc/public/en/option.html
base:{options:{title:{show:!1,textStyle:{fontWeight:"normal",color:"#fff",fontFamily:"SharpGrotesk-Medium20",textAlign:"center"},subtextStyle:{fontWeight:"normal",color:"#fff",fontFamily:"MaisonNeue-Medium",textAlign:"center"},textAlign:"center"},grid:{top:10,bottom:26,left:10,right:26,zlevel:100,height:"auto",// 280,
width:"auto",// 'auto',
containLabel:!0},yAxis:{position:"right",splitLine:{show:!1},nameGap:26,nameTextStyle:{fontFamily:"MaisonNeue-Medium",color:g,fontWeight:"normal",fontSize:13},zlevel:101},xAxis:{nameGap:26,nameTextStyle:{fontFamily:"MaisonNeue-Medium",color:g,fontSize:13,fontWeight:"normal",verticalAlign:"bottom"},zlevel:102},tooltip:{trigger:"item",transitionDuration:.6,showDelay:50,hideDelay:0,// borderColor: '#fff',
formatter:function formatter(a){// console.log(item);
var b=c.data[c.props.prefix],d=null;if(!!a&&!!a.value&&!!a.value[3]){var e=b&&b.name&&b.name[a.value[3]]?b.name[a.value[3]]:"Unavailable";// itemValue = item.value[3] ? item.value[3] : item.name;
d="<span>"+e+"</span><br><small>X: "+a.value[0]+"&nbsp;&nbsp;&nbsp;&nbsp;Y: "+a.value[1]+"</small>"}else// console.log(item);
// Send back a different string for the markarea tooltip.
d="<span>"+a.data.name+"</span><br>";return d}}}}},this.props=_extends(b||{},{prefix:"districts",options:this.states.base.options,endpoint:"https://d2fypeb6f974r1.cloudfront.net/dev/scatterplot/",metaVars:{counties:["id","name","lat","lon","all_sz"],districts:["id","name","lat","lon","all_sz"],schools:["id","name","lat","lon","all_sz"]},data:{},ref:function ref(a){c.component=a},onReady:function onReady(){d=!0,c.trigger("ready",[c])},onData:function onData(a,b){var d=c.data&&c.data[b]||{},e={};e[b]=_extends(d,a),c.data=_extends(c.data||{},e),c.setProps({data:c.data})},theme:h}),this.trigger=function(a,b){e[a]&&e[a].forEach(function(a){a.apply(null,b)})},this.on=function(a,b){e[a]?e[a].push(b):e[a]=[b],"ready"===a&&d&&b(c.component,c.component.echart)},this.addState=function(a,b){this.states[a]=b},this.loadState=function(a,b){b=b||{};// this.component.echart.setOption(this.getState(stateName), options)
var c=this.getState(a);b.hasOwnProperty("notMerge")&&(c.notMerge=b.notMerge),this.setProps(c)},this.getState=function(a){if(this.states.hasOwnProperty(a)){if("function"==typeof this.states[a])return this.states[a](this);if("object"===_typeof(this.states[a]))return this.states[a]}else throw new Error("no state found for "+a)},this.getScatterplotSeries=function(){},this.getDataSeries=function(){var a=this.component.getOption();return a.series&&a.series.length?a.series.find(function(a){return"base"===a.id}):null},this.setProps=function(a){this.props=_extends(this.props,a),this.render()},this.render=function(){// render the component
ReactDOM.render(// React.createElement(sedaScatterplot, this.props, null),
// container
React.createElement(sedaScatterplot,_extends({},this.props),null),a)},this.render()}/**
 * Returns an array with the IDs that correspond to
 * the largest `num` values.
 */ /**
 * Returns an array with the IDs that correspond to
 * the largest `num` values.
 */ /** Returns an array of values that fall within the range on the provided axis */ /**
 * Returns the value rounded to the provided number of decimal
 * places.
 */ /**
 * Returns a percent string from the provided value
 * @param {number} v
 */ /**
 * Returns a percent string of how far the provided value
 * is from the provided `from` value. (used for learning rates)
 * @param {number} v the value to format
 * @param {number} from the point of reference to determine what the % diff is
 */Scatterplot.prototype.getSeriesDataBySize=function(a,b){b=b||100;var c=a.sort(function(c,a){return a[2]-c[2]});return c.slice(0,b)},Scatterplot.prototype.getSeriesDataForIds=function(a,b){return b.map(function(b){return a.find(function(a){return a[3]===b})}).filter(function(a){return a})},Scatterplot.prototype.getSeriesDataInRange=function(a,b,c){var d="x"===b?0:"y"===b?1:2;return a.filter(function(a){return a[d]>c.min&&a[d]<c.max})},Scatterplot.prototype.formatTooltip=function(a,b,c,d,e,f){e=e||0,f=f||0;// console.log(item);
// console.log(data);
var g=null;if(!!a&&!!a.value&&!!a.value[3]){var h=b&&b.districts&&b.districts.name&&b.districts.name[a.value[3]]?b.districts.name[a.value[3]]:"Unavailable",i=(c+d+(a.value[0]+"")+(a.value[1]+"")).length,j=e?this.getPercentDiffLabel(a.value[0]):a.value[0],k=f?this.getPercentDiffLabel(a.value[1]):a.value[1],l=i>h.length?"<br>":"&nbsp;&nbsp;";g="<span>"+h+"</span><br><small>"+c+": "+j+l+d+": "+k+"</small>"}else// console.log(item);
// Send back a different string for the markarea tooltip.
g="<span>"+a.data.name+"</span><br>";return g},Scatterplot.prototype.formatNumber=function(a,b){var c=Math.round,d=Math.pow;if(b=b||2,!a&&0!==a)return"N/A";var e=d(10,b);return c(a*e)/e},Scatterplot.prototype.formatPercent=function(a,b){return b=b||0,a||0===a?this.formatNumber(100*a,b):"N/A"},Scatterplot.prototype.formatPercentDiff=function(a,b,c){return c=c||0,b=b||1,a||0===a?this.formatPercent(a-b,c):"N/A"},Scatterplot.prototype.getPercentDiffLabel=function(a){// console.log('Scatterplot.getPercentDiffLabel()');
// console.log(item);
return this.formatPercentDiff(a,1,0)+"%"};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,