"use strict";var _selectedItemStyle;function _extends(){return _extends=Object.assign||function(a){for(var b,c=1;c<arguments.length;c++)for(var d in b=arguments[c],b)Object.prototype.hasOwnProperty.call(b,d)&&(a[d]=b[d]);return a},_extends.apply(this,arguments)}function _defineProperty(a,b,c){return b in a?Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[b]=c,a}/**
 * scatterplot states for article one,
 * Patterns of Racial/Ethnic Opportunity Gaps
 * - article storyboard: https://docs.google.com/document/d/1adz0CwXI8WKok8ePVQEcSmlRQwRIjKaKvd8Am6OFfhY/edit
 */var jQ=jQuery,segData=[],searchItemIDs=[],names=[],Title={};// Placeholders for segregation series operations
Title.text="",Title.subtext="",Title.setTitle=function(){// Set title and subtitle
jQ(".column-scatterplot .title").html(Title.text),jQ(".column-scatterplot .subtitle").html(Title.subtext)};var axisBlue="#547892",activeHighlight={},highlightedLabel=function(a){return activeHighlight=a,{show:!0,position:"top",backgroundColor:"rgba(255, 255, 255, 0.8)",// '#FFFCCF',
borderColor:"#7D38BB",borderWidth:0,fontSize:12,fontWeight:500,fontFamily:"SharpGrotesk-Medium20",// 'MaisonNeue-Medium',
lineHeight:12,padding:[5,5],borderRadius:3,opacity:1,color:"rgba(25, 25, 25, 0.91)",// '#052965',
formatter:function formatter(a){// console.log(item);
// console.log(activeHighlight);
return activeHighlight[a.value[3]]}}},highlightedItemStyle={borderWidth:.4,borderColor:"#BABABA",// '#FFC02D',
color:"rgba(255, 178, 0, 0.77)",// '#FFFCDD',
opacity:1,shadowBlur:2,shadowColor:"rgba(0, 0, 0, 0.1)",shadowOffsetX:0,shadowOffsetY:1},selectedItemStyle=(_selectedItemStyle={borderWidth:.4,borderColor:"rgba(89, 151, 203, 0.8)",// '#7D38BB',
color:"#48CB95"},_defineProperty(_selectedItemStyle,"color","rgba(177, 222, 238, 0.8)"),_defineProperty(_selectedItemStyle,"opacity",1),_selectedItemStyle),initialMarkline={type:"scatter",markLine:{animation:!1,silent:!0,label:{show:!0,position:"middle",fontFamily:"SharpGrotesk-Medium20",fontWeight:"500",fontSize:11.52,padding:4,color:"rgba(5, 41, 101, 100%)",formatter:function formatter(a){return a.name}},data:[[{name:"",// Y axis
coord:[0,-3],symbol:"none",lineStyle:{color:"#547892",type:"solid",width:.5}},{coord:[0,3],symbol:"none"}],[{name:"",// x axis
coord:[-3,0],symbol:"none",lineStyle:{color:"#547892",type:"solid",width:.5}},{coord:[3,0],symbol:"none"}],[{name:"white scores = black scores",coord:[-2.5,-2.5],symbol:"none",lineStyle:{color:"rgba(5, 41, 101, 100%)",type:"solid",width:1}},{coord:[3,3],symbol:"none"}]]}},baseGrid={top:10,bottom:26,left:10,right:26,zlevel:100,height:"auto",// 280,
width:"auto",// 'auto',
containLabel:!0},baseYAxis={position:"right",splitLine:{show:!1},nameGap:26,nameTextStyle:{fontFamily:"SharpGrotesk-Medium20",color:"#547892",fontWeight:"normal",fontSize:11},zlevel:101},baseXAxis={nameGap:26,nameTextStyle:{fontFamily:"SharpGrotesk-Medium20",color:"#547892",fontSize:11,fontWeight:"normal",verticalAlign:"bottom"},zlevel:102},noRacialDisparityMarkline={animation:!1,silent:!0,label:{show:!0,position:"middle",fontFamily:"SharpGrotesk-Medium20",fontWeight:"500",fontSize:11.52,padding:4,formatter:function formatter(a){return a.name}},data:[[{name:"no racial inequality",coord:[0,-1],// [0, -6],
symbol:"none",lineStyle:{color:"#052965",type:"solid",width:1},label:{padding:4,position:"middle",color:"#052965"}},{coord:[0,6],// [ 0, 0],
symbol:"none"}]]},noGapMarkline={animation:!1,silent:!0,label:{show:!0,position:"middle",fontFamily:"SharpGrotesk-Medium20",fontWeight:"500",fontSize:11.52,padding:2,formatter:function formatter(a){return a.name}},data:[[{name:"no achievement gap",coord:[-1,0],symbol:"none",lineStyle:{color:"#052965",type:"solid",width:1},label:{padding:[0,0,2,300],position:"middle",color:"#052965"}},{coord:[6,0],// [ 0, 0],
symbol:"none"}]]},segNoGapMarkline={animation:!1,silent:!0,label:{show:!0,position:"middle",fontFamily:"SharpGrotesk-Medium20",fontWeight:"500",fontSize:11.52,padding:2,formatter:function formatter(a){return a.name}},data:[[{name:"no achievement gap",coord:[-.3,0],symbol:"none",lineStyle:{color:"#052965",type:"solid",width:1},label:{padding:[0,0,2,300],position:"middle",color:"#052965"}},{coord:[.7,0],// [ 0, 0],
symbol:"none"}]]},zeroSegGapMarkline={type:"scatter",markLine:{animation:!1,silent:!0,data:[[{name:"no segregation",coord:[0,-1],symbol:"none",lineStyle:{color:"#052965",type:"solid",width:1},label:{padding:[0,0,2,80],fontFamily:"SharpGrotesk-Medium20",fontWeight:"500",position:"middle",color:"#052965"}},{coord:[0,6],symbol:"none"}]]}},segMarkline={type:"scatter",markLine:{animation:!1,silent:!0,data:[[{name:"",coord:[6,2.5],symbol:"none",lineStyle:{color:"#052965",type:"solid",width:1}},{coord:[-1,2.25],symbol:"none"}]]}};/**
 * Slice array according from beginning according to provided size.
 * @param Array arr
 * @param Number size
 */function sliceLeast(a,b){return a.slice(0,b-1)}/**
 * Slice array from end according to provided size.
 * @param Array arr
 * @param Number size
 */function sliceMost(a,b){return a.slice(a.length-1-(b-1),a.length-1)}/**
 * Pulls the largest IDs from an object containing id: value pairs
 * @param {object} objData id: value pairs, (eg. { "010001": 4.5, "010002", 10, ...})
 * @param {number} num number of ids to return (e.g. 1)
 * @returns {array} array of ids with the largest values (e.g. [ "010002" ])
 */function getLargestIds(c,d){return Object.keys(c).sort(function(d,a){return c[a]-c[d]}).slice(0,d)}/**
 * Sort provided array by segregation stats
 * @param Array data
 * @returns Array returnArr
 */function sortDataBySeg(a){a.forEach(function(a){var b=segData.findIndex(function(b){return b[0]===a[3]});// console.log('have an index, it is ' + index);
a[4]=segData[b][1]});// Sort by seg stat
var b=a.sort(function(c,a){return c[4]<a[4]?-1:c[4]>a[4]?1:0});// console.log('Logging segSortedTop100.');
// console.log(returnArr);
return b}//
// Fetch the additional segregation data for state 9.
//
var segCSV="https://d2fypeb6f974r1.cloudfront.net/dev/scatterplot/districts-wb_seg.csv",xhr=new XMLHttpRequest;xhr.open("GET","https://d2fypeb6f974r1.cloudfront.net/dev/scatterplot/districts-wb_seg.csv",!0),xhr.onload=function(){if(4===xhr.readyState)if(200===xhr.status){// console.log(xhr.responseText);
// console.log('Seg data request finished.');
// console.log(this.responseText);
var a=this.responseText,b=Papa.parse(a);segData=b.data,segData=segData.filter(function(a){return"id"!==a[0]}),segData=segData.filter(function(a){return""!==a[0]})}else console.error(xhr.statusText)},xhr.onerror=function(){console.error(xhr.statusText)},xhr.send(null);/** State 1: Show white scores on x axis and black scores on y axis */var state1=function(a){0>=Object.keys(names).length&&a&&a.data&&a.data.districts&&a.data.districts.name&&(names=a.data.districts.name);var b=a.getState("base"),c={};1<=searchItemIDs.length&&0<=Object.keys(names).length&&1<=names[searchItemIDs[0]].length&&(c[searchItemIDs[0]]=names[searchItemIDs[0]]),Title.text="White and Black Student Scores",Title.subtext="",Title.setTitle();var d={title:{text:Title.text,// 'White and Black Students\' Average Performance',
subtext:Title.subtext,// 'U.S. School Districts 2009-2016',
textAlign:"center",left:"50%",top:"10px"},aria:{show:!0,description:Title.text+(1<=Title.subtext.length?", "+Title.subtext:"")},yAxis:{min:-3,max:3,name:"Black Student Scores"},xAxis:{min:-3,max:4,name:"White Student Scores"},tooltip:{trigger:"item",formatter:function formatter(b){return a.formatTooltip(b,a.data,"White Student Scores","Black Student Scores")}},series:[initialMarkline,{id:"highlighted",itemStyle:highlightedItemStyle,label:highlightedLabel(c),zlevel:500}]};// Set title and subtitle
return jQ(".column-scatterplot .title").text(Title.text),jQ(".column-scatterplot .subtitle").text(Title.subtext),{xVar:"w_avg",yVar:"b_avg",zVar:"all_sz",highlighted:Object.keys(c),options:deepmerge.all([b.options,d])//  baseOverrides
}},state2=function(a){0>=Object.keys(names).length&&a&&a.data&&a.data.districts&&a.data.districts.name&&(names=a.data.districts.name);var b=a.getState("base"),c={};c[1201980]="Walton County School District",1<=searchItemIDs.length&&0<=Object.keys(names).length&&1<=names[searchItemIDs[0]].length&&(c[searchItemIDs[0]]=names[searchItemIDs[0]]),Title.text="White and Black Student Scores",Title.setTitle();var d={title:{text:Title.text,// 'White and Black Students\' Average Performance',
subtext:Title.subtext,// 'U.S. School Districts 2009-2016',
textAlign:"center",left:"50%",top:"10px"},aria:{show:!0,description:Title.text+(1<=Title.subtext.length?", "+Title.subtext:"")},yAxis:{min:-3,max:3,name:"Black Student Scores"},xAxis:{min:-3,max:4,name:"White Student Scores"},tooltip:{trigger:"item",// borderColor: '#fff',
formatter:function formatter(b){return a.formatTooltip(b,a.data,"White Student Scores","Black Student Scores")}},series:[initialMarkline,{id:"highlighted",itemStyle:highlightedItemStyle,label:highlightedLabel(c),zlevel:500}]};// Set title and subtitle
return jQ(".column-scatterplot .title").text(Title.text),jQ(".column-scatterplot .subtitle").text(Title.subtext),{xVar:"w_avg",yVar:"b_avg",zVar:"all_sz",highlighted:Object.keys(c),options:deepmerge.all([b.options,d])//  baseOverrides
}},state3top100={},state3series={},state3=function(a){// state 2 is based on state 1
var b=a.getState("state1"),c=a.getDataSeries();state3series=c,c.itemStyle=_extends(c.itemStyle,{opacity:1});var d=a.getSeriesDataBySize(c.data,100);state3top100=d;var e={};1<=searchItemIDs.length&&0<=Object.keys(names).length&&1<=names[searchItemIDs[0]].length&&(e[searchItemIDs[0]]=names[searchItemIDs[0]]),Title.text="White and Black Student Scores",Title.subtext="100 Largest Districts",Title.setTitle();var f={title:{subtext:Title.subtext// '100 Largest U.S. School Districts 2009-2016'
},aria:{show:!0,description:Title.text+(1<=Title.subtext.length?", "+Title.subtext:"")},yAxis:{min:-3,max:3,name:"Black Student Scores"},xAxis:{min:-3,max:4,name:"White Student Scores"},series:[// dataSeries,
{id:"base"},{type:"scatter",data:d,symbolSize:c.symbolSize,itemStyle:selectedItemStyle},{id:"highlighted",itemStyle:highlightedItemStyle,label:highlightedLabel(e),zlevel:500}]};// console.log(top100);
return{selected:[],highlighted:Object.keys(e),options:deepmerge.all([b.options,f])// deepmerge(base.options, baseOverrides)
}},state4top100={},state4counter=0,state4=function(a){var b={};//highlight['1302220'] = 'Forsyth County';
b[1301230]="Clayton County School District",b[1302550]="Gwinnet County School District",b[1300120]="Atlanta City School District",1<=searchItemIDs.length&&0<=Object.keys(names).length&&1<=names[searchItemIDs[0]].length&&(b[searchItemIDs[0]]=names[searchItemIDs[0]]);// console.log(highlight);
var c=a.getState("base"),d=a.getDataSeries();// var base = scatterplot.getState('state1');
d.itemStyle=_extends(d.itemStyle,{opacity:.5});var e=getLargestIds(a.data.districts.all_sz,100);0===state4counter&&(state4top100=e),state4counter++,Title.text="White and Black Student Scores",Title.subtext="",Title.setTitle();var f={title:{text:Title.text,// 'White and Black Students\' Average Performance',
subtext:Title.subtext,// 'U.S. School Districts 2009-2016',
textAlign:"center",left:"50%",top:"10px",show:!1},aria:{show:!0,description:Title.text+(1<=Title.subtext.length?", "+Title.subtext:"")},grid:baseGrid,yAxis:deepmerge(baseYAxis,{min:-3,max:3,name:"Black Student Scores"}),xAxis:deepmerge(baseXAxis,{min:-3,max:4,name:"White Student Scores"}),tooltip:{trigger:"item",// borderColor: '#fff',
formatter:function formatter(b){return a.formatTooltip(b,a.data,"White Student Scores","Black Student Scores")}},series:[{id:"base"},{id:"selected",type:"scatter",symbolSize:d.symbolSize,itemStyle:selectedItemStyle,z:2// tooltip: tooltip,
},{id:"highlighted",itemStyle:highlightedItemStyle,label:highlightedLabel(b),zlevel:500},{type:"scatter",markLine:{animation:!1,silent:!0,label:{show:!0,position:"middle",fontFamily:"SharpGrotesk-Medium20",fontWeight:"500",fontSize:11.52,padding:4,color:"rgba(5, 41, 101, 100%)",formatter:function formatter(a){return a.name}},data:[[{name:"",// Y axis
coord:[0,-3],symbol:"none",lineStyle:{color:"#547892",type:"solid",width:.5}},{coord:[0,3],symbol:"none"}],[{name:"",// x axis
coord:[-3,0],symbol:"none",lineStyle:{color:"#547892",type:"solid",width:.5}},{coord:[3,0],symbol:"none"}],[{name:"",coord:[-2.5,-2.5],symbol:"none",lineStyle:{color:"rgba(5, 41, 101, 100%)",type:"solid",width:1}},{coord:[3,3],symbol:"none"}]]}}]};return{xVar:"w_avg",yVar:"b_avg",zVar:"all_sz",highlighted:Object.keys(b),selected:state4top100,options:deepmerge.all([c.options,f])// deepmerge(base.options, baseOverrides)
}},state5=function(a){// get current echart options
var b=a.component.getOption(),c=a.getState("base"),d=a.getDataSeries(),e={};// this state is created from the base
1<=searchItemIDs.length&&0<=Object.keys(names).length&&1<=names[searchItemIDs[0]].length&&(e[searchItemIDs[0]]=names[searchItemIDs[0]]),Title.text="Achievement Gaps and Affluence Gaps",Title.subtext="",Title.setTitle();var f={title:{show:!1,text:Title.text,// 'White-Black Achievement Gaps by Differences\nin Average Family Socioeconomic Resources',
subtext:Title.subtext,// 'US School Districts 2009-2016',
textAlign:"center",left:"50%",top:"10px"},aria:{show:!0,description:Title.text+(1<=Title.subtext.length?", "+Title.subtext:"")},grid:{top:10,bottom:26,left:10,right:28,zlevel:100,height:"auto",// 280,
width:"auto",// 'auto',
containLabel:!0},yAxis:deepmerge(baseYAxis,{min:-1,// -6,
max:6,// 3, // 0,
name:"White-Black Achievement Gap (in Grade Levels)",nameGap:24,lineHeight:48// splitNumber: 7
}),xAxis:deepmerge(baseXAxis,{min:-1,// -3,
max:6,// 7,
name:"White-Black Socioeconomic Inequality"}),tooltip:{trigger:"item",transitionDuration:.6,// borderColor: '#fff',
formatter:function formatter(b){return a.formatTooltip(b,a.data,"White-Black Socioeconomic Inequality","White-Black Achievement Gap")}},series:[{type:"scatter",markLine:noRacialDisparityMarkline},{type:"scatter",markLine:noGapMarkline},{id:"highlighted",itemStyle:highlightedItemStyle,label:highlightedLabel(e),zlevel:500}]};return{selected:[],highlighted:Object.keys(e),xVar:"wb_ses",yVar:"wb_avg",zVar:"all_sz",options:deepmerge.all([c.options,f])// deepmerge(base.options, baseOverrides)
}},state6=function(a){var b=a.component.getOption(),c=a.getDataSeries(),d=a.getState("state5"),e={};e[1301230]="Clayton County",e[1302550]="Gwinnet County",e[1300120]="Atlanta City",1<=searchItemIDs.length&&0<=Object.keys(names).length&&1<=names[searchItemIDs[0]].length&&(e[searchItemIDs[0]]=names[searchItemIDs[0]]),Title.text="Achievement Gaps and Affluence Gaps",Title.subtext="",Title.setTitle();var f={title:{show:!1,text:Title.text,// 'White-Black Achievement Gaps by Differences\nin Average Family Socioeconomic Resources',
subtext:Title.subtext,// 'US School Districts 2009-2016',
textAlign:"center",left:"50%",top:"10px"},aria:{show:!0,description:Title.text+(1<=Title.subtext.length?", "+Title.subtext:"")},grid:{top:10,bottom:26,left:10,right:28,zlevel:100,height:"auto",width:"auto",containLabel:!0},yAxis:deepmerge(baseYAxis,{position:"right",min:-1,// -6,
max:6,// 0,
name:"White-Black Achievement Gap (in Grade Levels)",nameGap:24}),xAxis:deepmerge(baseXAxis,{min:-1,// -3,
max:6,// 7,
name:"White-Black Socioeconomic Inequality"}),tooltip:{// trigger: 'item',
// borderColor: '#fff',
formatter:function formatter(b){return a.formatTooltip(b,a.data,"White-Black Socioeconomic Inequality","White-Black Achievement Gap")}},series:[// { id: 'base' },
{type:"scatter",markLine:noRacialDisparityMarkline},{type:"scatter",markLine:noGapMarkline},{id:"highlighted",itemStyle:highlightedItemStyle,label:highlightedLabel(e),zlevel:500}]};return{highlighted:Object.keys(e),selected:[],xVar:"wb_ses",yVar:"wb_avg",zVar:"all_sz",options:deepmerge.all([d.options,f])// (base.options, baseOverrides)
}},state7=function(a){var b=a.component.getOption(),c=a.getState("state6"),d=a.getDataSeries();d.itemStyle=_extends(d.itemStyle,{opacity:.5});var e=a.getSeriesDataBySize(d.data,100),f={};1<=searchItemIDs.length&&0<=Object.keys(names).length&&names[searchItemIDs[0]]&&1<=names[searchItemIDs[0]].length&&(f[searchItemIDs[0]]=names[searchItemIDs[0]]),Title.text="Achievement Gaps and Affluence Gaps",Title.subtext="100 Largest U.S. School Districts 2009-2016",Title.setTitle();var g={title:{show:!1,subtext:Title.subtext// '100 Largest U.S. School Districts 2009-2016'
},aria:{show:!0,description:Title.text+(1<=Title.subtext.length?", "+Title.subtext:"")},tooltip:{// trigger: 'item',
// borderColor: '#fff',
formatter:function formatter(b){return a.formatTooltip(b,a.data,"White-Black Socioeconomic Inequality","White-Black Achievement Gap")}},series:[// dataSeries,
{type:"scatter",data:e,symbolSize:d.symbolSize,itemStyle:selectedItemStyle},{type:"scatter",markLine:noGapMarkline},{id:"highlighted",itemStyle:highlightedItemStyle,label:highlightedLabel(f),zlevel:500}]};return{highlighted:Object.keys(f),options:deepmerge.all([c.options,g])}},state8=function(a){var b=a.component.getOption(),c=a.getState("state5"),d=a.getDataSeries(),e=a.getSeriesDataInRange(d.data,"x",{min:-.15,max:.15}),f={};1<=searchItemIDs.length&&0<=Object.keys(names).length&&names[searchItemIDs[0]]&&1<=names[searchItemIDs[0]].length&&(f[searchItemIDs[0]]=names[searchItemIDs[0]]),Title.text="Achievement Gaps and Affluence Gaps",Title.subtext="Districts with Lowest Socioeconomic Racial Disparity 2009-2016",Title.setTitle();var g={title:{show:!1,subtext:Title.subtext// 'Districts with Lowest Socioeconomic Racial Disparity 2009-2016'
},aria:{show:!0,description:Title.text+(1<=Title.subtext.length?", "+Title.subtext:"")},tooltip:{trigger:"item",// borderColor: '#fff',
formatter:function formatter(b){return a.formatTooltip(b,a.data,"White-Black Socioeconomic Inequality","White-Black Achievement Gap")}},series:[d,{type:"scatter",data:e,symbolSize:d.symbolSize,itemStyle:selectedItemStyle,// {
//   borderWidth: 0.5,
//   borderColor: '#C56A12',
//   color: '#FD7D02',
// },
opacity:.8},{id:"highlighted",itemStyle:highlightedItemStyle,label:highlightedLabel(f),zlevel:500},{type:"scatter",markLine:noGapMarkline}]};return{highlighted:Object.keys(f),options:deepmerge.all([c.options,g])}},state9dataSeries={},state9=function(a){// get current echart options
var b=a.component.getOption(),c=a.getState("base"),d=a.getDataSeries();// this state is created from the base
state9dataSeries=d;var e={};e[1303930]="Newton County",e[1302550]="Gwinnet County School District",e[1201980]="Walton County",1<=searchItemIDs.length&&0<=Object.keys(names).length&&names[searchItemIDs[0]]&&1<=names[searchItemIDs[0]].length&&(e[searchItemIDs[0]]=names[searchItemIDs[0]]),Title.text="Achievement Gaps and Affluence Gaps",Title.subtext="",Title.setTitle();var f={title:_defineProperty({show:!1,text:Title.text,// 'White-Black Achievement Gaps by Differences\nin Average Family Socioeconomic Resources',
subtext:Title.subtext,// 'US School Districts 2009-2016',
textAlign:"center",left:"50%",top:"10px"},"show",!1),aria:{show:!0,description:Title.text+(1<=Title.subtext.length?", "+Title.subtext:"")},grid:{top:10,bottom:26,left:10,right:28,zlevel:100,height:"auto",width:"auto",containLabel:!0},yAxis:deepmerge(baseYAxis,{min:-1,// -6,
max:6,// 0,
name:"White-Black Achievement Gap (in Grade Levels)",nameGap:24}),xAxis:deepmerge(baseYAxis,{min:-1,// -3,
max:6,// 7,
name:"White-Black Socioeconomic Inequality"}),tooltip:{trigger:"item",// borderColor: '#fff',
formatter:function formatter(b){return a.formatTooltip(b,a.data,"White-Black Socioeconomic Inequality","White-Black Achievement Gap")}},series:[{type:"scatter",markLine:noRacialDisparityMarkline},{type:"scatter",markLine:noGapMarkline},{id:"highlighted",itemStyle:highlightedItemStyle,label:highlightedLabel(e),zlevel:500}]};return{highlighted:Object.keys(e),selected:[],xVar:"wb_ses",yVar:"wb_avg",zVar:"all_sz",options:deepmerge.all([c.options,f])}},state10=function(a){// console.log('loading state9');
// this state is created from the base
// const base = scatterplot.getState('state8');
var b=a.getState("base"),c=state9dataSeries,d=a.getSeriesDataBySize(c.data,100),e=sortDataBySeg(d),f=sliceLeast(e,10),g=sliceMost(e,10),h={};// Build series most seg to highlight
h[1301230]="Clayton County School District",h[1300120]="Atlanta City School District",h[1302550]="Gwinnett County School District",1<=searchItemIDs.length&&0<=Object.keys(names).length&&names[searchItemIDs[0]]&&1<=names[searchItemIDs[0]].length&&(h[searchItemIDs[0]]=names[searchItemIDs[0]]),Title.text="Achievement Gaps and Segregation",Title.subtext="",Title.setTitle();var i={title:{show:!1,text:Title.text,// 'White-Black Achievement Gaps by Differences\nin Average Family Socioeconomic Resources',
subtext:Title.subtext,// 'Most and Least Segregated Out of\n100 Largest US School Districts 2009-2016',
textAlign:"center",left:"50%",top:"10px"},aria:{show:!0,description:Title.text+(1<=Title.subtext.length?", "+Title.subtext:"")},legend:{show:!0,orient:"vertical",textStyle:{color:"#173B75",fontFamily:"MaisonNeue-Book",fontWeight:"500",fontSize:11},backgroundColor:"rgba(255, 255, 255, 0.85)",borderRadius:3,padding:14,left:5,top:5,data:[{name:"Least Segregated",icon:"circle"},{name:"Most Segregated",icon:"circle"}]},grid:{top:10,bottom:26,left:10,right:28,zlevel:100,height:"auto",width:"auto",containLabel:!0},yAxis:deepmerge(baseYAxis,{min:-1,// -6,
max:6,// 0,
name:"White-Black Achievement Gap (in Grade Levels)",nameGap:24}),xAxis:deepmerge(baseXAxis,{min:-.3,max:.7,name:"White-Black Socioeconomic Segregation",interval:.15,scale:!1}),tooltip:{trigger:"item",formatter:function formatter(b){return a.formatTooltip(b,a.data,"White-Black Socioeconomic Segregation","White-Black Achievement Gap")}},series:[{id:"base"},{id:"highlighted",itemStyle:highlightedItemStyle,label:highlightedLabel(h),zlevel:500},{type:"scatter",markLine:segNoGapMarkline},zeroSegGapMarkline]};return{highlighted:Object.keys(h),xVar:"wb_seg",yVar:"wb_avg",zVar:"all_sz",options:deepmerge.all([b.options,i])}},state11=function(a){// console.log('loading state10');
// this state is created from the base
// const base = scatterplot.getState('state8');
var b=a.getState("base"),c=state9dataSeries,d=a.getSeriesDataBySize(c.data,100),e=sortDataBySeg(d),f=sliceLeast(e,10),g=sliceMost(e,10),h={};// Build series most seg to highlight
h["0604740"]="Berkeley, CA",h[1714460]="Evanston, IL",1<=searchItemIDs.length&&0<=Object.keys(names).length&&names[searchItemIDs[0]]&&1<=names[searchItemIDs[0]].length&&(h[searchItemIDs[0]]=names[searchItemIDs[0]]),Title.text="Achievement Gaps and Segregation",Title.subtext="",Title.setTitle();var i={title:{show:!1,text:Title.text,// 'White-Black Achievement Gaps by Differences\nin Average Family Socioeconomic Resources',
subtext:Title.subtext,// 'Most and Least Segregated Out of\n100 Largest US School Districts 2009-2016',
textAlign:"center",left:"50%",top:"10px"},aria:{show:!0,description:Title.text+(1<=Title.subtext.length?", "+Title.subtext:"")},legend:{show:!0,orient:"vertical",textStyle:{color:"#173B75",fontFamily:"MaisonNeue-Book",fontWeight:"500",fontSize:11},backgroundColor:"rgba(255, 255, 255, 0.85)",borderRadius:3,padding:14,left:5,top:5,data:[{name:"Least Segregated",icon:"circle"},{name:"Most Segregated",icon:"circle"}]},grid:{top:10,bottom:26,left:10,right:28,zlevel:100,height:"auto",width:"auto",containLabel:!0},yAxis:deepmerge(baseYAxis,{min:-1,// -6,
max:6,// 0,
name:"White-Black Achievement Gap (in Grade Levels)",nameGap:24}),xAxis:deepmerge(baseXAxis,{min:-.3,max:.7,name:"White-Black Socioeconomic Segregation",interval:.15,scale:!1}),tooltip:{// trigger: 'item',
formatter:function formatter(b){return a.formatTooltip(b,a.data,"White-Black Socioeconomic Segregation","White-Black Achievement Gap")}},series:[{id:"base"},{id:"highlighted",itemStyle:highlightedItemStyle,label:highlightedLabel(h),zlevel:500},{type:"scatter",markLine:segNoGapMarkline},zeroSegGapMarkline]};return{highlighted:Object.keys(h),xVar:"wb_seg",yVar:"wb_avg",zVar:"all_sz",onDataLoaded:function onDataLoaded(){console.log("data loaded"),console.log(a.data)},options:deepmerge.all([b.options,i])}},rootEl=document.getElementById("scatterplot"),scatterplot=new Scatterplot(rootEl);/** State 2: Show white scores on x axis and black scores on y axis */ // set the states
scatterplot.addState("state1",state1),scatterplot.addState("state2",state2),scatterplot.addState("state3",state3),scatterplot.addState("state4",state4),scatterplot.addState("state5",state5),scatterplot.addState("state6",state6),scatterplot.addState("state7",state7),scatterplot.addState("state8",state8),scatterplot.addState("state9",state9),scatterplot.addState("state10",state10),scatterplot.addState("state11",state11);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,