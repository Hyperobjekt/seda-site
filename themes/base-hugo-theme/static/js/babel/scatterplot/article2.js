"use strict";var _selectedItemStyle;function _defineProperty(a,b,c){return b in a?Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[b]=c,a}/**
 * scatterplot states for article two, "Affluent Schools Are Not Always the Best Schools"
 * - article storyboard: https://docs.google.com/document/d/1ShohEmEcoQoepsIBtQmzrUqAZ7pdFDL-i9dbfEaWtO0/edit
 */ // Set local placeholder for jQuery
var jQ=jQuery,axisBlue="#547892",activeHighlight={},highlightedLabel=function(a){return activeHighlight=a,{show:!0,position:"top",backgroundColor:"rgba(255, 255, 255, 0.9)",// '#0090FF', // '#FFFCCF',
borderColor:"#7D38BB",borderWidth:0,fontSize:12,fontWeight:500,fontFamily:"SharpGrotesk-Medium20",// 'MaisonNeue-Medium',
lineHeight:12,padding:[8,8],borderRadius:3,opacity:1,color:"rgba(25, 25, 25, 0.91)",// '#fff', // '#052965',
formatter:function formatter(a){// console.log(item);
// console.log(activeHighlight);
return activeHighlight[a.value[3]]}}},highlightedItemStyle={borderWidth:.4,borderColor:"rgba(156,109,0,0.8)",// '#FFC02D',
color:"rgba(255, 178, 0, 0.77)",// '#FFFCDD',
opacity:1,shadowBlur:2,shadowColor:"rgba(0, 0, 0, 0.1)",shadowOffsetX:0,shadowOffsetY:1},selectedItemStyle=(_selectedItemStyle={borderWidth:.4,borderColor:"rgba(89, 151, 203, 0.8)",// '#7D38BB',
color:"#48CB95"},_defineProperty(_selectedItemStyle,"color","rgba(177, 222, 238, 0.8)"),_defineProperty(_selectedItemStyle,"opacity",1),_selectedItemStyle),baseGrid={top:10,bottom:26,left:10,right:26,zlevel:100,height:"auto",// 280,
width:"auto",// 'auto',
containLabel:!0},baseYAxis={position:"right",splitLine:{show:!1},nameGap:26,nameTextStyle:{fontFamily:"SharpGrotesk-Medium20",color:axisBlue,fontWeight:"normal",fontSize:11},zlevel:101},baseXAxis={nameGap:26,nameTextStyle:{fontFamily:"SharpGrotesk-Medium20",color:axisBlue,fontSize:11,fontWeight:"normal",verticalAlign:"bottom"},zlevel:102},allGrdData=[],Title={};Title.text="",Title.subtext="",Title.setTitle=function(){// Set title and subtitle
jQ(".column-scatterplot .title").html(Title.text),jQ(".column-scatterplot .subtitle").html(Title.subtext)};/**
 * Slice array according from beginning according to provided size.
 * @param Array arr
 * @param Number size
 */function sliceLeast(a,b){return a.slice(0,b-1)}/**
 * Slice array from end according to provided size.
 * @param Array arr
 * @param Number size
 */function sliceMost(a,b){return a.slice(a.length-1-(b-1),a.length-1)}function setSearchHighlight(a,b){// console.log(highlight);
return a[b.id]=b.name+", "+b.state_name,a}//
// Fetch the additional segregation data for state 9.
//
var grdCSV="https://d2fypeb6f974r1.cloudfront.net/dev/scatterplot/districts-all_grd.csv",xhr=new XMLHttpRequest;xhr.open("GET","https://d2fypeb6f974r1.cloudfront.net/dev/scatterplot/districts-all_grd.csv",!0),xhr.onload=function(){if(4===xhr.readyState)if(200===xhr.status){// console.log(xhr.responseText);
// console.log('Seg data request finished.');
// console.log(this.responseText);
var a=this.responseText,b=Papa.parse(a);allGrdData=b.data,allGrdData=allGrdData.filter(function(a){return"id"!==a[0]}),allGrdData=allGrdData.filter(function(a){return""!==a[0]})}else console.error(xhr.statusText)},xhr.onerror=function(){console.error(xhr.statusText)},xhr.send(null);/** State 1: Grade 3 Chicago + Anne Arundel  */var state1=function(a){// state 2 is based on state 1
var b=a.getState("base"),c={};return c[2400060]="Anne Arundel County Public Schools",c[1709930]="Chicago Public School District",_plot&&_plot.searchItemIDs&&1<=_plot.searchItemIDs.length&&(c=setSearchHighlight(c,_plot.searchItemIDs[0])),Title.text="Average Test Scores, Grade 3",Title.subtext="",Title.setTitle(),{xVar:"all_ses",yVar:"all_avg3",zVar:"all_sz",selected:[],highlighted:Object.keys(c),options:deepmerge(b.options,{title:{show:!1,text:Title.text,subtext:Title.subtext,textAlign:"center",left:"50%",top:"10px"},aria:{show:!0,description:Title.text+(1<=Title.subtext.length?", "+Title.subtext:"")},yAxis:{min:-4,// -0.5,
max:4,// 9,
name:"Achievement (in Grade Levels)"},xAxis:{min:-4,max:3,name:"\u25C0  POORER                    Socioeconomic Status                    RICHER  \u25B6"},tooltip:{// trigger: 'item',
formatter:function formatter(b){return a.formatTooltip(b,a.data,"Socioeconomic Status","Achievement")}},series:[{id:"base"},{id:"highlighted",itemStyle:highlightedItemStyle,label:highlightedLabel(c),zlevel:500},{type:"scatter",markLine:{animation:!1,silent:!0,data:[[{name:"",// Grade level
coord:[-4,0],symbol:"none",lineStyle:{color:"#052965",// '#adadad'
type:"solid",width:1}},{coord:[3,0],symbol:"none"}]]}}]})}},state3=function(a){var b=a.getState("base"),c={};return c[2400060]="Anne Arundel County Public Schools",c[1709930]="Chicago Public School District",_plot&&_plot.searchItemIDs&&1<=_plot.searchItemIDs.length&&(c=setSearchHighlight(c,_plot.searchItemIDs[0])),Title.text="Average Test Scores, Grade 4",Title.subtext="",Title.setTitle(),{xVar:"all_ses",yVar:"all_avg4",zVar:"all_sz",highlighted:Object.keys(c),options:deepmerge(b.options,{title:{show:!1,text:Title.text,subtext:Title.subtext,textAlign:"center",left:"50%",top:"10px"},aria:{show:!0,description:Title.text+(1<=Title.subtext.length?", "+Title.subtext:"")},yAxis:{min:-4,max:4,name:"Achievement (in Grade Levels)"},xAxis:{min:-4,max:3,name:"\u25C0  POORER                    Socioeconomic Status                    RICHER  \u25B6"},tooltip:{// trigger: 'item',
formatter:function formatter(b){return a.formatTooltip(b,a.data,"Socioeconomic Status","Achievement")}},series:[{id:"base"},{id:"highlighted",itemStyle:highlightedItemStyle,label:highlightedLabel(c),zlevel:500},{type:"scatter",markLine:{animation:!1,silent:!0,data:[[{name:"",// Grade level
coord:[-4,0],symbol:"none",lineStyle:{color:"#052965",// '#adadad'
type:"solid",width:1}},{coord:[3,0],symbol:"none"}]]}}]})}},state4=function(a){// get current echart options
var b=a.component.getOption(),c=a.getState("base"),d={};// this state is created from the base
d[2400060]="Anne Arundel County Public Schools",d[1709930]="Chicago Public School District",_plot&&_plot.searchItemIDs&&1<=_plot.searchItemIDs.length&&(d=setSearchHighlight(d,_plot.searchItemIDs[0])),Title.text="Average Test Scores, Grade 5",Title.subtext="",Title.setTitle();var e={title:{show:!1,text:Title.text,subtext:Title.subtext,textAlign:"center",left:"50%",top:"10px"},aria:{show:!0,description:Title.text+(1<=Title.subtext.length?", "+Title.subtext:"")},yAxis:{min:-4,// -0.5,
max:4,// 9,
name:"Achievement (in Grade Levels)"},xAxis:{min:-4,max:3,name:"\u25C0  POORER                    Socioeconomic Status                    RICHER  \u25B6"},tooltip:{// trigger: 'item',
formatter:function formatter(b){return a.formatTooltip(b,a.data,"Socioeconomic Status","Achievement")}},series:[{id:"base"},{id:"highlighted",itemStyle:highlightedItemStyle,label:highlightedLabel(d),zlevel:500},{type:"scatter",markLine:{animation:!1,silent:!0,data:[[{name:"",// Grade level
coord:[-4,0],symbol:"none",lineStyle:{color:"#052965",// '#adadad'
type:"solid",width:1}},{coord:[3,0],symbol:"none"}]]}}]};return{xVar:"all_ses",yVar:"all_avg5",zVar:"all_sz",highlighted:Object.keys(d),options:deepmerge.all([c.options,e])}},state5=function(a){// get current echart options
var b=a.component.getOption(),c=a.getState("base"),d={};// this state is created from the base
d[2400060]="Anne Arundel County Public Schools",d[1709930]="Chicago Public School District",_plot&&_plot.searchItemIDs&&1<=_plot.searchItemIDs.length&&(d=setSearchHighlight(d,_plot.searchItemIDs[0])),Title.text="Average Test Scores, Grade 6",Title.subtext="",Title.setTitle();var e={title:{show:!1,text:Title.text,subtext:Title.subtext,textAlign:"center",left:"50%",top:"10px"},aria:{show:!0,description:Title.text+(1<=Title.subtext.length?", "+Title.subtext:"")},yAxis:{min:-4,// -0.5,
max:4,// 9,
name:"Achievement (in Grade Levels)"},xAxis:{min:-4,max:3,name:"\u25C0  POORER                    Socioeconomic Status                    RICHER  \u25B6"},tooltip:{// trigger: 'item',
formatter:function formatter(b){return a.formatTooltip(b,a.data,"Socioeconomic Status","Achievement")}},series:[{id:"base"},{id:"highlighted",itemStyle:highlightedItemStyle,label:highlightedLabel(d),zlevel:500},{type:"scatter",markLine:{animation:!1,silent:!0,data:[[{name:"",// Grade level
coord:[-4,0],symbol:"none",lineStyle:{color:"#052965",type:"solid",width:1}},{coord:[3,0],symbol:"none"}]]}}]};return{xVar:"all_ses",yVar:"all_avg6",zVar:"all_sz",highlighted:Object.keys(d),options:deepmerge.all([c.options,e])}},state6=function(a){// get current echart options
var b=a.component.getOption(),c=a.getState("base"),d={};// this state is created from the base
d[2400060]="Anne Arundel County Public Schools",d[1709930]="Chicago Public School District",_plot&&_plot.searchItemIDs&&1<=_plot.searchItemIDs.length&&(d=setSearchHighlight(d,_plot.searchItemIDs[0])),Title.text="Average Test Scores, Grade 7",Title.subtext="",Title.setTitle();var e={title:{show:!1,text:Title.text,subtext:Title.subtext,textAlign:"center",left:"50%",top:"10px"},aria:{show:!0,description:Title.text+(1<=Title.subtext.length?", "+Title.subtext:"")},yAxis:{min:-4,// -0.5,
max:4,// 9,
name:"Achievement (in Grade Levels)"},xAxis:{min:-4,max:3,name:"\u25C0  POORER                    Socioeconomic Status                    RICHER  \u25B6"},tooltip:{// trigger: 'item',
formatter:function formatter(b){return a.formatTooltip(b,a.data,"Socioeconomic Status","Achievement")}},series:[{id:"base"},{id:"highlighted",itemStyle:highlightedItemStyle,label:highlightedLabel(d),zlevel:500},{type:"scatter",markLine:{animation:!1,silent:!0,data:[[{name:"",// Grade level
coord:[-4,0],symbol:"none",lineStyle:{color:"#052965",// '#adadad'
type:"solid",width:1}},{coord:[3,0],symbol:"none"}]]}}]};return{xVar:"all_ses",yVar:"all_avg7",zVar:"all_sz",highlighted:Object.keys(d),options:deepmerge.all([c.options,e])}},state7=function(a){// get current echart options
var b=a.component.getOption(),c=a.getState("base"),d={};// this state is created from the base
d[2400060]="Anne Arundel County Public Schools",d[1709930]="Chicago Public School District",_plot&&_plot.searchItemIDs&&1<=_plot.searchItemIDs.length&&(d=setSearchHighlight(d,_plot.searchItemIDs[0])),Title.text="Average Test Scores, Grade 8",Title.subtext="",Title.setTitle();var e={title:{show:!1,text:Title.text,subtext:Title.subtext,textAlign:"center",left:"50%",top:"10px"},aria:{show:!0,description:Title.text+(1<=Title.subtext.length?", "+Title.subtext:"")},yAxis:{min:-4,max:4,name:"Achievement (in Grade Levels)"},xAxis:{min:-4,max:3,name:"\u25C0  POORER                    Socioeconomic Status                    RICHER  \u25B6"},tooltip:{// trigger: 'item',
formatter:function formatter(b){return a.formatTooltip(b,a.data,"Socioeconomic Status","Achievement")}},series:[{id:"base"},{id:"highlighted",itemStyle:highlightedItemStyle,label:highlightedLabel(d),zlevel:500},{type:"scatter",markLine:{animation:!1,silent:!0,data:[[{name:"",// Grade level
coord:[-4,0],symbol:"none",lineStyle:{color:"#052965",// '#adadad'
type:"solid",width:1}},{coord:[3,0],symbol:"none"}]]}}]};return{xVar:"all_ses",yVar:"all_avg8",zVar:"all_sz",highlighted:Object.keys(d),options:deepmerge.all([c.options,e])}},state8=function(a){// get current echart options
var b=a.component.getOption(),c=a.getState("base"),d={};// this state is created from the base
d[5509600]="Milwaukee School District",d[1709930]="Chicago Public School District",_plot&&_plot.searchItemIDs&&1<=_plot.searchItemIDs.length&&(d=setSearchHighlight(d,_plot.searchItemIDs[0])),Title.text="Average Test Scores, Grade 3",Title.subtext="",Title.setTitle();var e={title:{show:!1,text:Title.text,subtext:Title.subtext,textAlign:"center",left:"50%",top:"10px"},aria:{show:!0,description:Title.text+(1<=Title.subtext.length?", "+Title.subtext:"")},yAxis:{min:-4,// -0.5,
max:4,// 9,
name:"Achievement (in Grade Levels)"},xAxis:{min:-4,max:3,name:"\u25C0  POORER                    Socioeconomic Status                    RICHER  \u25B6"},tooltip:{// trigger: 'item',
formatter:function formatter(b){return a.formatTooltip(b,a.data,"Socioeconomic Status","Achievement")}},series:[{id:"base"},{id:"highlighted",itemStyle:highlightedItemStyle,label:highlightedLabel(d),zlevel:500},{type:"scatter",markLine:{animation:!1,silent:!0,data:[[{name:"",// Grade level
coord:[-4,0],symbol:"none",lineStyle:{color:"#052965",// '#adadad'
type:"solid",width:1}},{coord:[3,0],symbol:"none"}]]}}]};return{xVar:"all_ses",yVar:"all_avg3",zVar:"all_sz",highlighted:Object.keys(d),options:deepmerge.all([c.options,e])}},state9=function(a){// get current echart options
var b=a.component.getOption(),c=a.getState("base"),d={};// this state is created from the base
d[5509600]="Milwaukee School District",d[1709930]="Chicago Public School District",_plot&&_plot.searchItemIDs&&1<=_plot.searchItemIDs.length&&(d=setSearchHighlight(d,_plot.searchItemIDs[0])),Title.text="Average Test Scores, Grade 4",Title.subtext="",Title.setTitle();var e={title:{show:!1,text:Title.text,subtext:Title.subtext,textAlign:"center",left:"50%",top:"10px"},aria:{show:!0,description:Title.text+(1<=Title.subtext.length?", "+Title.subtext:"")},yAxis:{min:-4,// -0.5,
max:4,name:"Achievement (in Grade Levels)"},xAxis:{min:-4,max:3,name:"\u25C0  POORER                    Socioeconomic Status                    RICHER  \u25B6"},tooltip:{// trigger: 'item',
formatter:function formatter(b){return a.formatTooltip(b,a.data,"Socioeconomic Status","Achievement")}},series:[{id:"base"},{id:"highlighted",itemStyle:highlightedItemStyle,label:highlightedLabel(d),zlevel:500},{type:"scatter",markLine:{animation:!1,silent:!0,data:[[{name:"",// Grade level
coord:[-4,0],symbol:"none",lineStyle:{color:"#052965",// '#adadad'
type:"solid",width:1}},{coord:[3,0],symbol:"none"}]]}}]};return{xVar:"all_ses",yVar:"all_avg4",zVar:"all_sz",highlighted:Object.keys(d),options:deepmerge.all([c.options,e])}},state10=function(a){// get current echart options
var b=a.component.getOption(),c=a.getState("base"),d={};// this state is created from the base
d[5509600]="Milwaukee School District",d[1709930]="Chicago Public School District",_plot&&_plot.searchItemIDs&&1<=_plot.searchItemIDs.length&&(d=setSearchHighlight(d,_plot.searchItemIDs[0])),Title.text="Average Test Scores, Grade 5",Title.subtext="",Title.setTitle();var e={title:{show:!1,text:Title.text,subtext:Title.subtext,textAlign:"center",left:"50%",top:"10px"},aria:{show:!0,description:Title.text+(1<=Title.subtext.length?", "+Title.subtext:"")},yAxis:{min:-4,max:4,name:"Achievement (in Grade Levels)"},xAxis:{min:-4,max:3,name:"\u25C0  POORER                    Socioeconomic Status                    RICHER  \u25B6"},tooltip:{// trigger: 'item',
formatter:function formatter(b){return a.formatTooltip(b,a.data,"Socioeconomic Status","Achievement")}},series:[{id:"base"},{id:"highlighted",itemStyle:highlightedItemStyle,label:highlightedLabel(d),zlevel:500},{type:"scatter",markLine:{animation:!1,silent:!0,data:[[{name:"",// Grade level
coord:[-4,0],symbol:"none",lineStyle:{color:"#052965",// '#adadad'
type:"solid",width:1}},{coord:[3,0],symbol:"none"}]]}}]};return{xVar:"all_ses",yVar:"all_avg5",zVar:"all_sz",highlighted:Object.keys(d),options:deepmerge.all([c.options,e])}},state11=function(a){// get current echart options
var b=a.component.getOption(),c=a.getState("base"),d={};// this state is created from the base
d[5509600]="Milwaukee School District",d[1709930]="Chicago Public School District",_plot&&_plot.searchItemIDs&&1<=_plot.searchItemIDs.length&&(d=setSearchHighlight(d,_plot.searchItemIDs[0])),Title.text="Average Test Scores, Grade 6",Title.subtext="",Title.setTitle();var e={title:{show:!1,text:Title.text,subtext:Title.subtext,textAlign:"center",left:"50%",top:"10px"},aria:{show:!0,description:Title.text+(1<=Title.subtext.length?", "+Title.subtext:"")},yAxis:{min:-4,// -0.5,
max:4,// 9,
name:"Achievement (in Grade Levels)"},xAxis:{min:-4,max:3,name:"\u25C0  POORER                    Socioeconomic Status                    RICHER  \u25B6"},tooltip:{// trigger: 'item',
formatter:function formatter(b){return a.formatTooltip(b,a.data,"Socioeconomic Status","Achievement")}},series:[{id:"base"},{id:"highlighted",itemStyle:highlightedItemStyle,label:highlightedLabel(d),zlevel:500},{type:"scatter",markLine:{animation:!1,silent:!0,data:[[{name:"",// Grade level
coord:[-4,0],symbol:"none",lineStyle:{color:"#052965",// '#adadad'
type:"solid",width:1}},{coord:[3,0],symbol:"none"}]]}}]};return{xVar:"all_ses",yVar:"all_avg6",zVar:"all_sz",highlighted:Object.keys(d),options:deepmerge.all([c.options,e])}},state12=function(a){// get current echart options
var b=a.component.getOption(),c=a.getState("base"),d={};// this state is created from the base
d[5509600]="Milwaukee School District",d[1709930]="Chicago Public School District",_plot&&_plot.searchItemIDs&&1<=_plot.searchItemIDs.length&&(d=setSearchHighlight(d,_plot.searchItemIDs[0])),Title.text="Average Test Scores, Grade 7",Title.subtext="",Title.setTitle();var e={title:{show:!1,text:Title.text,subtext:Title.subtext,textAlign:"center",left:"50%",top:"10px"},aria:{show:!0,description:Title.text+(1<=Title.subtext.length?", "+Title.subtext:"")},yAxis:{min:-4,max:4,name:"Achievement (in Grade Levels)"},xAxis:{min:-4,max:3,name:"\u25C0  POORER                    Socioeconomic Status                    RICHER  \u25B6"},tooltip:{// trigger: 'item',
formatter:function formatter(b){return a.formatTooltip(b,a.data,"Socioeconomic Status","Achievement")}},series:[{id:"base"},{id:"highlighted",itemStyle:highlightedItemStyle,label:highlightedLabel(d),zlevel:500},{type:"scatter",markLine:{animation:!1,silent:!0,data:[[{name:"",// Grade level
coord:[-4,0],symbol:"none",lineStyle:{color:"#052965",type:"solid",width:1}},{coord:[3,0],symbol:"none"}]]}}]};return{xVar:"all_ses",yVar:"all_avg7",zVar:"all_sz",highlighted:Object.keys(d),options:deepmerge.all([c.options,e])}},state13=function(a){// get current echart options
var b=a.component.getOption(),c=a.getState("base"),d={};// this state is created from the base
d[5509600]="Milwaukee School District",d[1709930]="Chicago Public School District",_plot&&_plot.searchItemIDs&&1<=_plot.searchItemIDs.length&&(d=setSearchHighlight(d,_plot.searchItemIDs[0])),Title.text="Average Test Scores, Grade 8",Title.subtext="",Title.setTitle();var e={title:{show:!1,text:Title.text,subtext:Title.subtext,textAlign:"center",left:"50%",top:"10px"},aria:{show:!0,description:Title.text+(1<=Title.subtext.length?", "+Title.subtext:"")},yAxis:{min:-4,max:4,name:"Achievement (in Grade Levels)"},xAxis:{min:-4,max:3,name:"\u25C0  POORER                    Socioeconomic Status                    RICHER  \u25B6"},tooltip:{// trigger: 'item',
formatter:function formatter(b){return a.formatTooltip(b,a.data,"Socioeconomic Status","Achievement")}},series:[{id:"base"},{id:"highlighted",itemStyle:highlightedItemStyle,label:highlightedLabel(d),zlevel:500},{type:"scatter",markLine:{animation:!1,silent:!0,data:[[{name:"",// Grade level
coord:[-4,0],symbol:"none",lineStyle:{color:"#052965",type:"solid",width:1}},{coord:[3,0],symbol:"none"}]]}}]};return{xVar:"all_ses",yVar:"all_avg8",zVar:"all_sz",highlighted:Object.keys(d),options:deepmerge.all([c.options,e])}},state14=function(a){// get current echart options
var b=a.component.getOption(),c=a.getState("base"),d={};// this state is created from the base
d[2400060]="Anne Arundel County Public Schools",d[1709930]="Chicago Public School District",d[5509600]="Milwaukee School District",_plot&&_plot.searchItemIDs&&1<=_plot.searchItemIDs.length&&(d=setSearchHighlight(d,_plot.searchItemIDs[0])),Title.text="Learning Rates and 3rd Grade Achievement",Title.subtext="",Title.setTitle();var e={title:{show:!1,text:Title.text,subtext:Title.subtext,textAlign:"center",left:"50%",top:"10px"},aria:{show:!0,description:Title.text+(1<=Title.subtext.length?", "+Title.subtext:"")},grid:{top:10,bottom:26,left:10,right:26,zlevel:100,height:"auto",// 280,
width:"auto",// 'auto',
containLabel:!0},yAxis:{min:.4,max:1.6,name:"Learning Rates",nameGap:45,axisLabel:{formatter:function formatter(b){return a.getPercentDiffLabel(b)}}},xAxis:{min:-4,max:4,name:"Achievement (In Grade Levels)"},tooltip:{// trigger: 'item',
formatter:function formatter(b){return a.formatTooltip(b,a.data,"Achievement","Learning Rate",0,1)}},series:[{id:"base"},{id:"highlighted",itemStyle:highlightedItemStyle,label:highlightedLabel(d),zlevel:500},{type:"scatter",markLine:{animation:!1,silent:!0,data:[[{name:"Average",// Grade level
coord:[0,1.6],symbol:"none",lineStyle:{color:"#052965",// '#adadad'
type:"solid",width:1}},{coord:[0,.45],symbol:"none"}],[{name:"Average",// y axis markline
coord:[-4,1],symbol:"none",label:{show:!1},lineStyle:{color:"#052965",type:"solid",width:1}},{coord:[3.75,1],symbol:"none"}],[{name:"Average",// y axis markline
coord:[4,.4],symbol:"none",label:{show:!0,position:"middle",padding:[0,0,-5,0]// rotate: -90
},lineStyle:{color:"#052965",type:"solid",width:0}},{coord:[4,1.6],symbol:"none"}],[{name:"",// Grade level
coord:[-3,1.6],symbol:"none",lineStyle:{color:"#052965",// '#adadad'
type:"solid",width:0}},{coord:[-3,.45],symbol:"none"}],[{name:"",// Grade level
coord:[3,1.6],symbol:"none",lineStyle:{color:"#052965",// '#adadad'
type:"solid",width:0}},{coord:[3,.45],symbol:"none"}]]}}]};return{xVar:"all_avg3",yVar:"all_grd",zVar:"all_sz",highlighted:Object.keys(d),selected:[],options:deepmerge.all([c.options,e])}},state15=function(a){// get current echart options
var b=a.component.getOption(),c=a.getState("base"),d={};// this state is created from the base
d[2400060]="Anne Arundel County Public Schools",d[1709930]="Chicago Public School District",d[5509600]="Milwaukee School District",_plot&&_plot.searchItemIDs&&1<=_plot.searchItemIDs.length&&(d=setSearchHighlight(d,_plot.searchItemIDs[0]));// Build the series of elements for quadrant highlight.
var e=a.getDataSeries();// Update title and subtext placeholders
Title.text="Learning Rates and 3rd Grade Achievement",Title.subtext="",Title.setTitle();var f={title:{show:!1,text:Title.text,subtext:Title.subtext,textAlign:"center",left:"50%",top:"10px"},aria:{show:!0,description:Title.text+(1<=Title.subtext.length?", "+Title.subtext:"")},grid:{top:10,bottom:26,left:10,right:26,zlevel:100,height:"auto",// 280,
width:"auto",// 'auto',
containLabel:!0},yAxis:{min:.4,max:1.6,name:"Learning Rates",nameGap:45,axisLabel:{formatter:function formatter(b){return a.getPercentDiffLabel(b)}}},xAxis:{min:-4,max:4,name:"Achievement (In Grade Levels)"},tooltip:{// trigger: 'item',
formatter:function formatter(b){return a.formatTooltip(b,a.data,"Achievement","Learning Rate",0,1)}},series:[{id:"base"},{id:"selected",type:"scatter",// name: 'High early opportunity,\nhigh growth opportunity',
symbolSize:e.symbolSize,itemStyle:{zlevel:50,z:50,borderWidth:1,borderColor:"rgba(20, 33, 156, 1)",color:"rgba(145, 115, 255, 1)"},label:{position:"6, 1.6",show:!1,backgroundColor:"rgba(255,255,0,0.97)",borderColor:"#042965",fontSize:12,fontWeight:600,fontFamily:"MaisonNeue-Medium",lineHeight:28,padding:[6,8],borderRadius:3,color:"#042965",formatter:function formatter(a){return d[a.value[3]]}}},{id:"highlighted",itemStyle:highlightedItemStyle,label:highlightedLabel(d),zlevel:500},{type:"scatter",markLine:{animation:!1,silent:!0,symbol:"none",symbolSize:0,data:[[{name:"Average",// Y axis
coord:[0,1.6],symbol:"none",label:{show:!0,position:"end"},lineStyle:{color:"#052965",type:"solid",width:1}},{coord:[0,.45],symbol:"none"}],[{name:"Average",// y axis markline
coord:[4,.4],symbol:"none",label:{show:!0,position:"middle",padding:[0,0,-5,0]// rotate: -90
},lineStyle:{color:"#052965",type:"solid",width:0}},{coord:[4,1.6],symbol:"none"}],[{name:"",// x axis
coord:[-4,1],symbol:"none",label:{show:!1},lineStyle:{color:"#052965",type:"solid",width:1}},{coord:[3.75,1],symbol:"none"}]]}},{id:"markQuadrantLine",type:"scatter",name:"High early opportunity, high growth",markLine:{silent:!0,animation:!1,label:{show:!0,position:"insideTopRight",verticalAlign:"top",padding:[5,5,0,0],color:"#052965",fontWeight:500,fontFamily:"MaisonNeue-Medium"},data:[[{coord:[0,1.3],symbol:"none",symbolSize:0,lineStyle:{color:"#73D8AE",// 'rgba(253, 165, 2, 1)', // 'red',
width:140,type:"solid",opacity:.65}},{coord:[4,1.3],symbol:"none",symbolSize:0}],[{coord:[2.15,1.56],symbol:"none",name:"High early opportunity, high growth",symbolSize:0,lineStyle:{color:"transparent",// 'rgba(253, 165, 2, 1)', // 'red',
width:0,type:"solid",opacity:0},label:{show:!0,color:"#052965",fontWeight:500,fontSize:13,fontFamily:"MaisonNeue-Medium",position:"middle"}},{coord:[2.16,1.56],symbol:"none",symbolSize:0}]]}}]};return{xVar:"all_avg3",yVar:"all_grd",zVar:"all_sz",highlighted:Object.keys(d),selected:[],options:deepmerge.all([c.options,f])}},state16=function(a){// get current echart options
var b=a.component.getOption(),c=a.getState("base"),d={};// this state is created from the base
d[2400060]="Anne Arundel County Public Schools",d[1709930]="Chicago Public School District",d[5509600]="Milwaukee School District",_plot&&_plot.searchItemIDs&&1<=_plot.searchItemIDs.length&&(d=setSearchHighlight(d,_plot.searchItemIDs[0]));// Build the series of elements for quadrant highlight.
var e=a.getDataSeries();// var quadrant = getQuadrantSeries(4, 3, 1, Object.entries(scatterplot.data['districts']['all_avg3']), allGrdData);
// Update title and subtext placeholders
Title.text="Learning Rates and 3rd Grade Achievement",Title.subtext="",Title.setTitle();var f={title:{show:!1,text:Title.text,subtext:Title.subtext,textAlign:"center",left:"50%",top:"10px"},aria:{show:!0,description:Title.text+(1<=Title.subtext.length?", "+Title.subtext:"")},grid:{top:10,bottom:26,left:10,right:26,zlevel:100,height:"auto",// 280,
width:"auto",// 'auto',
containLabel:!0},yAxis:{min:.4,max:1.6,name:"Learning Rates",nameGap:45,axisLabel:{formatter:function formatter(b){return a.getPercentDiffLabel(b)}}},xAxis:{min:-4,max:4,name:"Achievement (In Grade Levels)"},tooltip:{// trigger: 'item',
formatter:function formatter(b){return a.formatTooltip(b,a.data,"Achievement","Learning Rate",0,1)}},series:[{id:"base"},{id:"markQuadrantLine",type:"scatter",markLine:{silent:!0,animate:!0,data:[[{coord:[-4,.7],symbol:"none",symbolSize:0,lineStyle:{color:"#73D8AE",// 'rgba(253, 165, 2, 1)',
width:140,type:"solid",opacity:.65}},{coord:[0,.7],symbol:"none",symbolSize:0}],[{coord:[-2.2,.44],symbol:"none",name:"Low early opportunity, low growth",symbolSize:0,lineStyle:{color:"transparent",// 'rgba(253, 165, 2, 1)', // 'red',
width:0,type:"solid",opacity:0},label:{show:!0,position:"middle",color:"#052965",fontWeight:500,fontSize:13,fontFamily:"MaisonNeue-Medium"}},{coord:[-2.21,.44],symbol:"none",symbolSize:0}]]}},// End markline
{id:"selected",type:"scatter",symbolSize:e.symbolSize,itemStyle:{borderWidth:1,borderColor:"rgba(20, 33, 156, 1)",// 'rgba(0,0,0,1)',
color:"rgba(145, 115, 255, 1)"// '#b6a2de' // 'rgba(255,0,0,0.25)'
},z:2},{id:"highlighted",itemStyle:highlightedItemStyle,label:highlightedLabel(d),zlevel:500},{type:"scatter",markLine:{animation:!1,silent:!0,label:{padding:5,color:"#052965"},data:[[{name:"Average",// Y axis
coord:[0,1.6],symbol:"none",label:{show:!0,position:"end",padding:[0,0,0,0]},lineStyle:{color:"#052965",type:"solid",width:1}},{coord:[0,.45],symbol:"none"}],[{name:"Average",// x axis markline
coord:[4,.4],symbol:"none",label:{show:!0,position:"middle",padding:[0,0,-5,0]// rotate: -90
},lineStyle:{color:"#052965",type:"solid",width:0}},{coord:[4,1.6],symbol:"none"}],[{name:"Average",// x axis
coord:[-4,1],symbol:"none",label:{show:!1,position:"end"},lineStyle:{color:"#052965",type:"solid",width:1}},{coord:[3.75,1],symbol:"none"}]]}}]};return{xVar:"all_avg3",yVar:"all_grd",zVar:"all_sz",highlighted:Object.keys(d),selected:[],options:deepmerge.all([c.options,f])}},state17=function(a){// get current echart options
var b=a.component.getOption(),c=a.getState("base"),d={};// this state is created from the base
d[2400060]="Anne Arundel County Public Schools",d[1709930]="Chicago Public School District",d[5509600]="Milwaukee School District",_plot&&_plot.searchItemIDs&&1<=_plot.searchItemIDs.length&&(d=setSearchHighlight(d,_plot.searchItemIDs[0]));// Build the series of elements for quadrant highlight.
var e=a.getDataSeries();// var quadrant = getQuadrantSeries(3, 3, 1, Object.entries(scatterplot.data['districts']['all_avg3']), allGrdData);
// Update title and subtext placeholders
Title.text="Learning Rates and 3rd Grade Achievement",Title.subtext="",Title.setTitle();var f={title:{show:!1,text:Title.text,subtext:Title.subtext,textAlign:"center",left:"50%",top:"10px"},aria:{show:!0,description:Title.text+(1<=Title.subtext.length?", "+Title.subtext:"")},grid:{top:10,bottom:26,left:10,right:26,zlevel:100,height:"auto",// 280,
width:"auto",// 'auto',
containLabel:!0},yAxis:{min:.4,max:1.6,name:"Learning Rates",nameGap:45,axisLabel:{formatter:function formatter(b){return a.getPercentDiffLabel(b)}}},xAxis:{min:-4,max:4,name:"Achievement (In Grade Levels)"},tooltip:{// trigger: 'item',
formatter:function formatter(b){return a.formatTooltip(b,a.data,"Achievement","Learning Rate",0,1)}},series:[{id:"base"},{id:"selected",type:"scatter",symbolSize:e.symbolSize,itemStyle:{borderWidth:1,borderColor:"rgba(20, 33, 156, 1)",// 'rgba(0,0,0,1)',
color:"rgba(145, 115, 255, 1)"// '#b6a2de' // 'rgba(255,0,0,0.25)'
},z:2},{id:"markQuadrantLine",type:"scatter",markLine:{silent:!0,animate:!0,data:[[{coord:[0,.7],symbol:"none",symbolSize:0,lineStyle:{color:"#73D8AE",// 'rgba(253, 165, 2, 1)', // 'red',
width:140,type:"solid",opacity:.65}},{coord:[4,.7],symbol:"none",symbolSize:0}],[{coord:[2.15,.44],symbol:"none",name:"High early opportunity, low growth",symbolSize:0,lineStyle:{color:"transparent",// 'rgba(253, 165, 2, 1)', // 'red',
width:0,type:"solid",opacity:0},label:{show:!0,position:"middle",color:"#052965",fontWeight:500,fontSize:13,fontFamily:"MaisonNeue-Medium"}},{coord:[2.16,.44],symbol:"none",symbolSize:0}]]}},// End markline
{id:"highlighted",itemStyle:highlightedItemStyle,label:highlightedLabel(d),zlevel:500},{type:"scatter",markLine:{animation:!1,silent:!0,data:[[{name:"Average",// Y axis
coord:[0,1.6],symbol:"none",label:{show:!0,position:"end",padding:[0,0,0,0]},lineStyle:{color:"#052965",type:"solid",width:1}},{coord:[0,.45],symbol:"none"}],[{name:"Average",// x axis markline
coord:[4,.4],symbol:"none",label:{show:!0,position:"middle",padding:[0,0,-5,0]// rotate: -90
},lineStyle:{color:"#052965",type:"solid",width:0}},{coord:[4,1.6],symbol:"none"}],[{name:"",// x axis
coord:[-4,1],symbol:"none",label:{show:!1},lineStyle:{color:"#052965",type:"solid",width:1}},{coord:[3.75,1],symbol:"none"}]]}}]};return{xVar:"all_avg3",yVar:"all_grd",zVar:"all_sz",highlighted:Object.keys(d),selected:[],options:deepmerge.all([c.options,f])}},state18=function(a){// get current echart options
var b=a.component.getOption(),c=a.getState("base"),d={};// this state is created from the base
d[2400060]="Anne Arundel County Public Schools",d[1709930]="Chicago Public School District",d[5509600]="Milwaukee School District",_plot&&_plot.searchItemIDs&&1<=_plot.searchItemIDs.length&&(d=setSearchHighlight(d,_plot.searchItemIDs[0]));// Build the series of elements for quadrant highlight.
var e=a.getDataSeries();// var quadrant = getQuadrantSeries(1, 3, 1, Object.entries(scatterplot.data['districts']['all_avg3']), allGrdData);
// Update title and subtext placeholders
Title.text="Learning Rates and 3rd Grade Achievement",Title.subtext="",Title.setTitle();var f={title:{show:!1,text:Title.text,subtext:Title.subtext,textAlign:"center",left:"50%",top:"10px"},aria:{show:!0,description:Title.text+(1<=Title.subtext.length?", "+Title.subtext:"")},grid:{top:10,bottom:26,left:10,right:26,zlevel:100,height:"auto",// 280,
width:"auto",// 'auto',
containLabel:!0},yAxis:{min:.4,max:1.6,name:"Learning Rates",nameGap:45,axisLabel:{formatter:function formatter(b){return a.getPercentDiffLabel(b)}}},xAxis:{min:-4,max:4,name:"Achievement (In Grade Levels)"},tooltip:{// trigger: 'item',
formatter:function formatter(b){return a.formatTooltip(b,a.data,"Achievement","Learning Rate",0,1)}},series:[{id:"base"},{id:"selected",type:"scatter",symbolSize:e.symbolSize,itemStyle:{borderWidth:1,borderColor:"rgba(20, 33, 156, 1)",color:"rgba(145, 115, 255, 1)"},z:2},{id:"markQuadrantLine",type:"scatter",markLine:{silent:!0,animate:!0,data:[[{coord:[-4,1.3],symbol:"none",symbolSize:0,lineStyle:{color:"#73D8AE",// 'rgba(253, 165, 2, 1)', // 'red',
width:140,type:"solid",opacity:.56}},{coord:[0,1.3],symbol:"none",symbolSize:0}],[{coord:[-2.2,1.48],symbol:"none",name:"Low early opportunity, high growth",symbolSize:0,lineStyle:{color:"transparent",// 'rgba(253, 165, 2, 1)', // 'red',
width:0,type:"solid",opacity:0},label:{show:!0,position:"middle",color:"#052965",fontWeight:500,fontSize:13,fontFamily:"MaisonNeue-Medium"}},{coord:[-2.21,1.48],symbol:"none",symbolSize:0}]]}},// End markline
{id:"highlighted",itemStyle:highlightedItemStyle,label:highlightedLabel(d),zlevel:500},{type:"scatter",markLine:{animation:!1,silent:!0,data:[[{name:"Average",// Y axis
coord:[0,1.6],symbol:"none",label:{show:!0,position:"end",padding:[0,0,0,0]},lineStyle:{color:"#052965",type:"solid",width:1}},{coord:[0,.45],symbol:"none"}],[{name:"Average",// x axis markline
coord:[4,.4],symbol:"none",label:{show:!0,position:"middle",padding:[0,0,-5,0]// rotate: -90
},lineStyle:{color:"#052965",type:"solid",width:0}},{coord:[4,1.6],symbol:"none"}],[{name:"",// x axis
coord:[-4,1],symbol:"none",label:{show:!1},lineStyle:{color:"#052965",type:"solid",width:1}},{coord:[3.75,1],symbol:"none"}]]}}]};return{xVar:"all_avg3",yVar:"all_grd",zVar:"all_sz",highlighted:Object.keys(d),selected:[],options:deepmerge.all([c.options,f])}},state19=function(a){var b=a.getState("base"),c=a.component.getOption(),d={};// var dataSeries = scatterplot.getDataSeries();
d[2400060]="Anne Arundel County Public Schools",d[1709930]="Chicago Public School District",_plot&&_plot.searchItemIDs&&1<=_plot.searchItemIDs.length&&(d=setSearchHighlight(d,_plot.searchItemIDs[0])),Title.text="Learning Rates",Title.subtext="",Title.setTitle();var e={title:{show:!1,text:Title.text,subtext:Title.subtext,textStyle:{fontSize:18,lineHeight:32},textAlign:"center",left:"50%",top:"10px"},aria:{show:!0,description:Title.text+(1<=Title.subtext.length?", "+Title.subtext:"")},grid:{top:10,bottom:26,left:10,right:26,zlevel:100,height:"auto",// 280,
width:"auto",// 'auto',
containLabel:!0},yAxis:{min:.4,max:1.6,name:"Learning Rates",nameGap:45,axisLabel:{formatter:function formatter(b){return a.getPercentDiffLabel(b)}}},xAxis:{min:-4,max:3.5,name:"\u25C0  POORER                    Socioeconomic Status                    RICHER  \u25B6"},tooltip:{// trigger: 'item',
formatter:function formatter(b){return a.formatTooltip(b,a.data,"Socioeconomic Status","Learning Rate",0,1)}},series:[{id:"base"},{id:"highlighted",itemStyle:highlightedItemStyle,label:highlightedLabel(d),zlevel:500},{type:"scatter",markLine:{animation:!1,silent:!0,data:[[{name:"",// upper right markline
coord:[3,1.25],symbol:"none",lineStyle:{color:"rgba(255, 192, 45, 1)",type:"solid",width:0// removing this line
}},{coord:[-1,.75],symbol:"none"}],[{name:"",// lower left markline
coord:[1,.9],symbol:"none",lineStyle:{color:"rgba(255, 192, 45, 1)",type:"solid",width:0//removing this line
}},{coord:[-4,.8],symbol:"none"}],[{name:"",// x axis
coord:[-4,1],symbol:"none",// lineStyle: {
//   color: '#adadad' // 'rgba(0,0,0,0.2)'
// }
lineStyle:{// color: '#fff', // 'rgba(0,0,0,0.6)'
color:"#052965",type:"solid",width:1}},{coord:[3,1],symbol:"none"}]]}}]};return{highlighted:Object.keys(d),selected:[],xVar:"all_ses",yVar:"all_grd",zVar:"all_sz",options:deepmerge.all([b.options,e])}},rootEl=document.getElementById("scatterplot"),scatterplot=new Scatterplot(rootEl);/** State 3: Grade 4 Chicago + Anne Arundel */ // set the states
// scatterplot.addState('state1_1', state1_1);
// scatterplot.addState('state2', state2);
scatterplot.addState("state1",state1),scatterplot.addState("state3",state3),scatterplot.addState("state4",state4),scatterplot.addState("state5",state5),scatterplot.addState("state6",state6),scatterplot.addState("state7",state7),scatterplot.addState("state8",state8),scatterplot.addState("state9",state9),scatterplot.addState("state10",state10),scatterplot.addState("state11",state11),scatterplot.addState("state12",state12),scatterplot.addState("state13",state13),scatterplot.addState("state14",state14),scatterplot.addState("state15",state15),scatterplot.addState("state16",state16),scatterplot.addState("state17",state17),scatterplot.addState("state18",state18),scatterplot.addState("state19",state19);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,