"use strict";function _extends(){return _extends=Object.assign||function(a){for(var b,c=1;c<arguments.length;c++)for(var d in b=arguments[c],b)Object.prototype.hasOwnProperty.call(b,d)&&(a[d]=b[d]);return a},_extends.apply(this,arguments)}/* use strict */(function(a){var b={scatterplot:null,wrappers:[],top:null,height:null,bottom:null,isTransitional:!1,activeState:"state1",// searchItemIDs: [],
searchEl:null,searchProps:{// Props passed in to init the search input(s)
algoliaId:"QPJ12WSVR4",algoliaKey:"bae9e4604dbd263cc47c48bfb30dd5dc",onSuggestionSelected:function onSuggestionSelected(a){searchItemIDs[0]=a.id,scatterplot.loadState(b.activeState);!!dataLayer&&3<=dataLayer.length?dataLayer.push({event:"districtHighlighted",highlightedDistrict:a.name}):console.log("dataLayer not available. Skipping analytics reporting for highlighted item select.")},onSelectedClear:function onSelectedClear(){// console.log(e);
// Clear search item array
// Reload state
searchItemIDs=[],scatterplot.loadState(b.activeState)},indices:["districts"],inputProps:{placeholder:"Highlight a district...","aria-label":"Enter a district name to search"}},renderSearch:function renderSearch(){// $elements = $('.search-component');
// $elements.each(function(el) {
//   (plot.searchEl).push(new plot.searchInit(plot.searchProps, el));
// });
var a=document.getElementById("searchComponent");b.searchEl=new b.searchInit(b.searchProps,a)},searchInit:function searchInit(a,b){var c=this,d=_extends(a,{ref:function ref(a){c.component=a}});// add reference to the component to props
this.render=function(a){ReactDOM.render(React.createElement(SedaSearch,a,null),b)},this.render(d)},update:function update(){// console.log('update');
var c=a.grep(b.wrappers,function(c){b.top=b.scatterplot.offset().top+120;// + 462;
var d=a(c).offset().top,e=a(c).outerHeight();// $(el).offset().top - $(window).scrollTop();
// var wrapperHeight = $(el).height();
// If plot top or bottom are within
// add to activeWrappers.
// console.log('plot.top = ' + plot.top);
// console.log('offset().top = ' + $(el).offset().top);
// console.log('scrolltop = ' + $(window).scrollTop());
// console.log('wrapperTop = ' + wrapperTop);
// console.log('wrapperBottom = ' + wrapperBottom);
if(b.top>=d&&b.top<=+d+ +e)// console.log('It\'s within a wrapper.');
return a(c)});// console.log(activeWrappers);
if(1==c.length){b.scatterplot.removeClass("transitional"),b.isTransitional=!1;// Set state to the first one.
// console.log(activeWrappers[0]);
var d=a(c[0]).attr("data-plot-state"),e=!!a(c[0]).attr("data-plot-notmerge")&&a(c[0]).attr("data-plot-notmerge");d!==b.activeState&&(console.log("loading new state "+d),e?scatterplot.loadState(d,{notMerge:!0}):scatterplot.loadState(d),b.activeState=d)}else(0===c.length||1<=c.length)&&(b.scatterplot.addClass("transitional"),b.isTransitional=!0)},getCoords:function getCoords(){b.top=b.scatterplot.offset().top,b.height=b.scatterplot.find("> div").height(),b.bottom=+b.top+ +b.height}};// Get top and bottom y coords of the scatterplot
// Reset them if the screen is resized
// Only trigger scroll ever 50ms so less resources
b.scatterplot=a("#scatterplot"),b.wrappers=a(".state-desc-wrapper"),b.getCoords(),a(window).resize(function(){// plot.top = (plot.scatterplot).offset().top;
// plot.height = (plot.scatterplot).find('> div').height();
// plot.bottom = Number(plot.top) + Number(plot.height);
b.getCoords()}),scatterplot.on("ready",function(){var c=!1;a(window).scroll(function(){c=!0}),setInterval(function(){c&&(b.update(),c=!1)},50),1<=a(".search-component").length&&b.renderSearch()}),scatterplot.loadState("state1")})(jQuery);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,