"use strict";(function(a){var b=a.noConflict(!1),a=b,c=window.ga&&window.ga.create;/**
   * Calls a lambda function which subscribes the user
   * to mailchimp lists.
   */if(1<=a("form#getTheData").length){console.log("Testing subscribe-users.js at "+subscribePath);var d=a("#mc-embedded-subscribe");a("#mc-embedded-subscribe").on("click",function(b){b.preventDefault();// If honeyput input not filled, make request.
var e=a("form#getTheData input.botField").val(),f=a("form#getTheData input#email-field").val(),g=a("form#getTheData #mcSpinner");!e&&1<=(f+"").length?(console.log("Making AJAX call."),g.css({opacity:1}),d.prop("disabled",!0),a.ajax({method:"POST",url:subscribePath,//  + "/subscribe-users/",
dataType:"json",timeout:4e3,headers:{"content-type":"application/json","Access-Control-Allow-Origin":"*"},data:JSON.stringify({status:"subscribed",email:f}),success:function success(a){// console.log(result);
// Stop spinner spinning.
console.log("AJAX request success!!!!"),g.css({opacity:0}),!!dataLayer&&3<=dataLayer.length&&c?dataLayer.push({event:"eMailSignup",eventCallback:function eventCallback(){setTimeout(function(){window.location=a.redirect},600)}}):(console.log("dataLayer not available. Skipping analytics reporting."),setTimeout(function(){window.location=a.redirect},600))},error:function error(a){var b="Something went wrong.";// Stop spinner spinning.
// Set form input to active.
a.responseJSON&&a.responseJSON.title&&a.responseJSON.detail&&(b=b+"  Here's some information:\n\n"+a.responseJSON.title+" \n"+a.responseJSON.detail),console.error(b),g.css({opacity:0}),d.prop("disabled",!1),!!dataLayer&&3<=dataLayer.length?dataLayer.push({event:"eMailSignupError"}):console.log("dataLayer not available. Skipping analytics reporting.")}})):console.error("\uD83D\uDE32 Uh oh, there's a bot on the page, or the email input isn't filled! Please try again.")})}})(jQuery);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,