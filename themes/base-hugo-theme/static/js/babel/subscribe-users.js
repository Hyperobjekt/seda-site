"use strict";(function(a){var b=a.noConflict(!1),a=b;/**
   * Calls a lambda function which subscribes the user
   * to mailchimp lists.
   */if(1<=a("form#getTheData").length){console.log("Testing subscribe-users.js at "+subscribePath);var c=a("#mc-embedded-subscribe");a("#mc-embedded-subscribe").on("click",function(b){b.preventDefault();// If honeyput input not filled, make request.
var d=a("form#getTheData input.botField").val(),e=a("form#getTheData input#email-field").val(),f=a("form#getTheData #mcSpinner");!d&&1<=(e+"").length?(console.log("Making AJAX call."),f.css({opacity:1}),c.prop("disabled",!0),a.ajax({method:"POST",url:subscribePath,//  + "/subscribe-users/",
dataType:"json",timeout:4e3,headers:{"content-type":"application/json","Access-Control-Allow-Origin":"*"},data:JSON.stringify({status:"subscribed",email:e}),success:function success(a){if(console.log("AJAX request success!!!!"),f.css({opacity:0}),!!dataLayer&&3<=dataLayer.length)dataLayer.push({event:"eMailSignup",eventCallback:function eventCallback(){setTimeout(function(){window.location=a.redirect},600)}});else{console.log("dataLayer not available. Skipping analytics reporting.");// Redirect.
setTimeout(function(){window.location=a.redirect},600)}},error:function error(a){var b="Something went wrong.";// Stop spinner spinning.
// Set form input to active.
a.responseJSON&&a.responseJSON.title&&a.responseJSON.detail&&(b=b+"  Here's some information:\n\n"+a.responseJSON.title+" \n"+a.responseJSON.detail),console.error(b),f.css({opacity:0}),c.prop("disabled",!1),!!dataLayer&&3<=dataLayer.length?dataLayer.push({event:"eMailSignupError"}):console.log("dataLayer not available. Skipping analytics reporting.")}})):console.error("\uD83D\uDE32 Uh oh, there's a bot on the page, or the email input isn't filled! Please try again.")})}})(jQuery);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,